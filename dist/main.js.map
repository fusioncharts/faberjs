{"version":3,"sources":["webpack://Mason/webpack/universalModuleDefinition","webpack://Mason/webpack/bootstrap","webpack://Mason/./src/utils/constants.js","webpack://Mason/./src/utils/index.js","webpack://Mason/./src/grid/track-sizing.js","webpack://Mason/./src/grid/index.js","webpack://Mason/./src/grid/helpers/repeatResolver.js","webpack://Mason/./src/mason.js","webpack://Mason/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ATOMIC_DATA_TYPE","getDisplayProperty","domTree","style","display","pluckNumber","arg","arguments","length","isNaN","Number","UNDEF","getMultiplierOfFr","size","replace","TrackResolver","tracks","undefined","items","containerSize","_classCallCheck","this","clear","set","info","props","_initTrackSize","_initItems","_tracks","len","type","multiplier","baseSize","growthLimit","config","_config","trackAr","frTracks","intrinsicTracks","Array","isArray","indexOf","Infinity","push","Math","max","min","_objectSpread","sanitizedTracks","_items","nonSpanningItemStartIndex","item","sanitizedItems","validItems","start","end","autoFlow","_getParentSize","sort","a","b","gap1","gap2","widthOfParentTracks","filter","track","forEach","_placeNonSpanningItems","_placeSpanningItems","_distributeFreeSpace","trackIndex","_this$_config","slice","sizeConsumed","sizeLeft","sizePerTrack","availableTracks","hasFrTrack","_this$_config2","spanningItems","trackSizedp","_this$_config3","totalSpaceUsed","trackId","index","_frSpaceDistributorHelper","spacePerFrTrack","eligibleTracks","totalFrTrackRatio","freeSpace","spacePerIntrinsicTrack","minMaxTracks","frozenTrack","frozen","_intrinsicSpaceDistributorHelper","validSizes","minmaxRegex","getUCFirstString","str","charAt","toUpperCase","validNestedGrid","tree","_ref","gridTemplateColumns","gridTemplateRows","test","parseRepeatFunction","repeatStr","split","map","trim","getCleanSize","sizeAr","getItemSize","dimension","templateCol","parsedDim","trackDir","updateMatrix","grid","j","x","y","getMaxRowColumn","maxRow","maxColumn","itemIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","Grid","grid_classCallCheck","setup","_tsa","mapping","_domTree","_sanitizeTracks","_sanitizeItems","_inflateTracks","_assignCoordinatesToCells","trackInfo","_getMaxRowColumn","children","_fetchTrackInformation","row","nameToLineMap","lineToNameMap","rowTracks","col","colTracks","nameList","sizeList","startLineNames","endLineNames","splittedTrackInfo","toLowerCase","getProps","itemStyle","cell","extraRows","gridAutoFlow","rowNum","keys","colNum","autoFlowItems","gridMatrix","freeCells","grid_objectSpread","rowStart","rowEnd","colStart","colEnd","shift","ceil","sizedTracks","minHeightContribution","minWidthContribution","_ref2","paddingStart","paddingEnd","paddingTop","paddingBottom","width","height","tsa","resolveTracks","calculatedStyle","_solveUnresolvedChildren","resolvedTracks","trackWidth","parsedWidthOfItem","childrenWithRepeatConfiguration","unResolvedChildren","child","parentReference","colTrackDp","parentInfo","numOfRows","rowWidth","itemInARow","newGridTemplateColumns","newGridTemplateRows","itemWidth","repeatResolver","gridLayoutEngine","trackHeight","_domTree$style","justifyItems","alignItems","rowTrackdp","colTrackdp","layout","justifySelf","alignSelf","padding","x2","y2","replaceWithAbsValue","styleTrack","calculatedTrack","trackSplitAr","trackWithAbsValue","counter","updateDomTreeWithResolvedValues","rowTrackSum","colTrackSum","containerStyle","getConfig","userGivenStyles","computeGridLayout","count","compute","LayoutEngine","mason_classCallCheck","computeLayout","mason","clonedDomTree","cloneObject","_typeof","arr","cloneObj","attachLayoutInformation","baseTree","calculatedTree","__webpack_exports__","mason_computeLayout"],"mappings":"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","file":"main.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Mason\"] = factory();\n\telse\n\t\troot[\"Mason\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export const DISPLAY_GRID = 'grid';\nexport const DISPLAY_FLEX = 'flex';\nexport const CENTER = 'center';\nexport const START = 'start';\nexport const END = 'end';\nexport const STRETCH = 'stretch';\nexport const ATOMIC_DATA_TYPE = ['string', 'number', 'function', 'boolean', 'undefined'];","import { ATOMIC_DATA_TYPE } from \"./constants\";\n\nconst getDisplayProperty = (domTree) => {\n    return domTree.style && domTree.style.display;\n  },\n  cloneObject = (arg) => {\n    if ((ATOMIC_DATA_TYPE.indexOf(typeof arg) > -1) || arg === null) {\n      return arg;\n    }\n\n    if (Array.isArray(arg)) {\n      let i,\n        len,\n        arr = [];\n\n      for (i = 0, len = arg.length; i < len; i++) {\n        arr.push(cloneObject(arg[i]));\n      }\n\n      return arr;\n    } else if (typeof arg === 'object') {\n      let cloneObj = {},\n        key;\n\n      for (key in arg) {\n        cloneObj[key] = cloneObject(arg[key]);\n      }\n\n      return cloneObj;\n    }\n  },\n  attachLayoutInformation = (baseTree = {}, calculatedTree = {}) => {\n    let i,\n      len;\n\n    baseTree.layout = calculatedTree.layout;\n\n    for (i = 0, len = (baseTree.children || []).length; i < len; i++) {\n      attachLayoutInformation(baseTree.children[i], calculatedTree.children[i]);\n    }\n  },\n  pluckNumber = function () {\n    var arg,\n      i,\n      l;\n\n    for (i = 0, l = arguments.length; i < l; i += 1) {\n      arg = arguments[i];\n      if (!arg && arg !== false && arg !== 0) {\n        continue;\n      } else if (isNaN(arg = Number(arg))) {\n        continue;\n      }\n      return arg;\n    }\n    return UNDEF;\n  };\n\nexport {\n  cloneObject,\n  attachLayoutInformation,\n  getDisplayProperty,\n  pluckNumber\n};","import { pluckNumber } from \"../utils\";\n\nconst getMultiplierOfFr = size => +size.replace(/fr/, ''),\n  _frSpaceDistributorHelper = (tracks, totalSpaceUsed, containerSize) => {\n    let freeSpace,\n      spacePerFrTrack,\n      eligibleTracks,\n      totalFrTrackRatio = 0;\n      \n    if (!tracks.length) {\n      return;\n    }\n\n    tracks.forEach(track => totalFrTrackRatio += track.multiplier);\n\n    freeSpace = containerSize - totalSpaceUsed;\n    spacePerFrTrack = freeSpace / totalFrTrackRatio;\n    \n    eligibleTracks = tracks.filter(track => track.baseSize <= track.multiplier * spacePerFrTrack);\n\n    if (eligibleTracks.length < tracks.length) {\n      tracks.filter(track => track.baseSize > track.multiplier * spacePerFrTrack).forEach(track => totalSpaceUsed += track.baseSize);\n      return _frSpaceDistributorHelper(eligibleTracks, totalSpaceUsed, containerSize);\n    } else {\n      eligibleTracks.forEach(track => track.baseSize = track.multiplier * spacePerFrTrack);\n    }\n  },\n  _intrinsicSpaceDistributorHelper = (tracks, totalSpaceUsed, containerSize) => {\n    let freeSpace,\n      spacePerIntrinsicTrack,\n      i,\n      len,\n      frozenTrack = 0,\n      minMaxTracks,\n      growthLimit,\n      baseSize;\n      \n    if (!tracks.length) {\n      return;\n    }\n    minMaxTracks = tracks.filter(track => track.type === 'minmax' && track.growthLimit !== Infinity);\n    freeSpace = containerSize - totalSpaceUsed;\n    \n    minMaxTracks.sort(function (a, b) {\n      let gap1 = a.growthLimit - a.baseSize,\n      gap2 = b.growthLimit - b.baseSize;\n      \n      return gap1 - gap2;\n    });\n    \n    len = minMaxTracks.length;\n    while (frozenTrack < len && freeSpace) {\n      spacePerIntrinsicTrack = freeSpace / ((minMaxTracks.length - frozenTrack) || 1);\n      /**\n       * @todo: remove the frozen tracks.\n       */\n      for (i = 0, len = minMaxTracks.length; i <  len; i++) {\n        growthLimit = minMaxTracks[i].growthLimit;\n        \n        baseSize = Math.min(spacePerIntrinsicTrack + minMaxTracks[i].baseSize, growthLimit);\n        freeSpace -= (baseSize - minMaxTracks[i].baseSize);\n        minMaxTracks[i].baseSize = baseSize;\n\n        if (growthLimit === baseSize && !minMaxTracks[i].frozen) {\n          minMaxTracks[i].frozen = true;\n          frozenTrack++;\n        }\n      }\n    }\n\n    tracks = tracks.filter(track => (track.type === 'minmax' && track.growthLimit === Infinity) || track.type !== 'minmax');\n    spacePerIntrinsicTrack = freeSpace / tracks.length;\n\n    tracks.forEach(track => track.baseSize += spacePerIntrinsicTrack);\n  };\n\nclass TrackResolver {\n  constructor (tracks = [], items = [], containerSize = 600) {\n    this.clear();\n\n    this.set('tracks', tracks);\n    this.set('items', items);\n    this.set('containerSize', containerSize);\n    return this;\n  }\n\n  set (key, info) {\n    this.props[key] = info;\n\n    switch (key) {\n    case 'tracks':\n      this._initTrackSize(); break;\n    case 'items':\n      this._initItems(); break;\n    case 'containerSize': \n      this.props[key] = isNaN(+info) ? 0 : +info;\n    }\n    return this;\n  }\n\n  get (key) {\n    return this.props[key];\n  }\n\n  _initTrackSize (_tracks) {\n    let tracks = _tracks || this.props.tracks || [],\n      config = this._config,\n      trackAr = [{}],\n      i,\n      len,\n      size,\n      type,\n      multiplier,\n      baseSize,\n      growthLimit;\n\n    config.frTracks = [];\n    config.intrinsicTracks = [];\n\n    for (i = 1, len = tracks.length; i < len; i++) {\n      size = tracks[i].size;\n\n      multiplier = 1;\n      if (Array.isArray(size)) {\n        baseSize = +size[0] || 0;\n\n        if (size[1].indexOf('fr') > 0 || size[0].indexOf('fr') > 0) {\n          growthLimit = Infinity;\n          config.frTracks.push(i);\n          type = 'minmax';\n        } else if (size[1] === 'auto' || size[0] === 'auto') {\n          growthLimit = Infinity;\n          config.intrinsicTracks.push(i);\n          type = 'minmax';\n        } else if (!isNaN(+size[0]) && !isNaN(+size[1])) {\n          growthLimit = Math.max(+size[0], +size[1]);\n          baseSize = Math.min(+size[0], +size[1]);\n          config.intrinsicTracks.push(i);\n          type = 'minmax'\n        }\n      } else if (!isNaN(+size)) {\n        baseSize = growthLimit = +size;\n        type = 'fixed';\n      } else if (size.indexOf('fr') > 0) {\n        baseSize = 0\n        growthLimit = Infinity;\n        config.frTracks.push(i);\n        type = 'flex';\n        multiplier = getMultiplierOfFr(size);\n      } else {\n        baseSize = 0;\n        growthLimit = Infinity;\n        type = 'intrinsic';\n        config.intrinsicTracks.push(i);\n      }\n\n      trackAr.push({\n        ...tracks[i],\n        type,\n        multiplier,\n        baseSize,\n        growthLimit\n      });\n    }\n\n    return (config.sanitizedTracks = trackAr);\n  }\n\n  _initItems (_items) {\n    let items = _items || this.props.items || [],\n      config = this._config,\n      sanitizedItems = [],\n      nonSpanningItemStartIndex,\n      item,\n      validItems = 0,\n      i,\n      len;\n\n    for (i = 0, len = items.length; i < len; i++) {\n      if (isNaN(items[i].start) || isNaN(items[i].end)) {\n        config.autoFlow.push(items[i]);\n        continue;\n      }\n      sanitizedItems.push({...items[i]});\n      \n      item = sanitizedItems[validItems];\n      validItems++;\n\n      item.size = isNaN(item.size) ? this._getParentSize(item) : +item.size;\n    }\n\n    sanitizedItems.sort(function (a, b) {\n      let gap1 = a.end - a.start,\n        gap2 = b.end - b.start;\n\n      if (gap1 === gap2) {\n        return a.start - b.start;\n      } else return gap1 - gap2;\n    });\n\n    for (i = 0, nonSpanningItemStartIndex = len = sanitizedItems.length; i < len; i++) {\n      if (sanitizedItems[i].end - sanitizedItems[i].start > 1) {\n        nonSpanningItemStartIndex = i;\n        break;\n      }\n    }\n\n    this._config.nonSpanningItemStartIndex = nonSpanningItemStartIndex;\n\n    return (this._config.sanitizedItems = sanitizedItems);\n  }\n\n  _getParentSize (item) {\n    let { sanitizedTracks } = this._config,\n      parentTracks,\n      widthOfParentTracks = 0;\n\n    parentTracks = sanitizedTracks.filter(track => (track.start >= item.start && track.end <= item.end));\n\n    parentTracks.forEach(track => widthOfParentTracks += track.baseSize);\n\n    return (widthOfParentTracks || 0);\n  }\n\n  resolveTracks () {\n    this._placeNonSpanningItems()\n      ._placeSpanningItems()\n      ._distributeFreeSpace();\n\n    return this._config.sanitizedTracks;\n  }\n\n  _placeNonSpanningItems () {\n    let { sanitizedItems, sanitizedTracks, nonSpanningItemStartIndex } = this._config,\n      nonSpanningItems = sanitizedItems.slice(0, nonSpanningItemStartIndex),\n      track,\n      trackIndex;\n\n    nonSpanningItems.forEach(item => {\n      trackIndex = item.start;\n      track = sanitizedTracks[trackIndex];\n\n      if (track.type !== 'fixed') {\n        track.baseSize = Math.max(track.baseSize, item.size);\n        track.growthLimit = Math.max(track.growthLimit, track.baseSize);\n      }\n    });\n\n    return this;\n  }\n\n  _placeSpanningItems () {\n    let { sanitizedItems, sanitizedTracks, nonSpanningItemStartIndex, frTracks } = this._config,\n      spanningItems = sanitizedItems.slice(nonSpanningItemStartIndex),\n      trackSizedp = [0],\n      sizeConsumed,\n      sizeLeft,\n      sizePerTrack,\n      availableTracks,\n      hasFrTrack,\n      i,\n      len;\n\n    if (!spanningItems.length) return this;\n\n    for (i = 1, len = sanitizedTracks.length; i < len; i++) {\n      trackSizedp[i] = trackSizedp[i - 1] + (sanitizedTracks[i].baseSize || 0);\n    }\n\n    spanningItems.forEach(item => {\n      sizeConsumed = trackSizedp[item.end - 1] - trackSizedp[item.start - 1];\n      sizeLeft = Math.max(0, item.size - sizeConsumed);\n\n      if (!sizeLeft) return;\n\n      for (i = item.start, hasFrTrack = false, availableTracks = 0; i < item.end; i++) {\n        if (frTracks.indexOf(i) >= 0) {\n          hasFrTrack = true;\n        }\n        if (sanitizedTracks[i].type !== 'fixed') {\n          availableTracks++;\n        }\n      }\n\n      if (!availableTracks || hasFrTrack) return;\n\n      sizePerTrack = sizeLeft / availableTracks;\n      for (i = item.start; i < item.end; i++) {\n        if (sanitizedTracks[i].type !== 'fixed') {\n          sanitizedTracks[i].baseSize += sizePerTrack;\n        }\n      }\n    });\n    return this;\n  }\n\n  _distributeFreeSpace () {\n    let { frTracks, intrinsicTracks, sanitizedTracks } = this._config,\n      { containerSize } = this.props,\n      totalSpaceUsed = 0;\n\n    sanitizedTracks.forEach(track => totalSpaceUsed += (track.baseSize || 0));\n\n    if (totalSpaceUsed < containerSize) {\n      if (frTracks.length) {\n        frTracks.forEach((trackId, index) => {frTracks[index] = sanitizedTracks[trackId];});\n        frTracks.forEach(track => totalSpaceUsed -= track.baseSize);\n        _frSpaceDistributorHelper(frTracks, totalSpaceUsed, containerSize);\n      } else if (intrinsicTracks.length) {\n        intrinsicTracks.forEach((trackId, index) => {intrinsicTracks[index] = sanitizedTracks[trackId];});\n        _intrinsicSpaceDistributorHelper(intrinsicTracks, totalSpaceUsed, containerSize);\n      }\n    }\n    return this;\n  }\n\n  clear () {\n    this.props = {};\n    this._config = {\n      frTracks: [],\n      intrinsicTracks: [],\n      autoFlow: []\n    };\n\n    return this;\n  }\n}\n\nexport default TrackResolver;\n","import { getDisplayProperty, pluckNumber } from \"../utils\";\nimport TrackResolver from \"./track-sizing\";\nimport { CENTER, END, STRETCH } from \"../utils/constants\";\nimport { repeatResolver } from \"./helpers/repeatResolver\";\n\nconst validSizes = ['auto', 'none'],\n  minmaxRegex = /minmax/,\n  // repeatFunctionRegex = /repeat\\(/g,\n  // templateSplitRegex = /\\s(\\[.*\\])*(\\(.*\\))*/g,\n  templateSplitRegex = ' ',\n  getUCFirstString = str => (str.charAt(0).toUpperCase() + str.slice(1)),\n  validNestedGrid = tree => {\n    let { gridTemplateColumns, gridTemplateRows } = tree.style || {};\n\n    if (/repeat\\(/g.test(gridTemplateColumns) || /repeat\\(/g.test(gridTemplateRows)) {\n      return false;\n    }\n    return true;\n  },\n  parseRepeatFunction = repeatStr => {\n    return repeatStr.split(/\\(|\\)/g)[1].split(',').map(arg => arg && arg.trim());\n  },\n  getCleanSize = size => {\n    size = size.trim();\n    if (size === 'auto') return size;\n    if (!isNaN(+size)) return +size;\n\n    if (minmaxRegex.test(size)) {\n      let sizeAr = size.split(/\\(|\\)/g)[1].split(',');\n\n      return [\n        sizeAr[0].trim(),\n        sizeAr[1].trim()\n      ];\n    }\n\n    return size;\n  },\n  getItemSize = (items, dimension) => {\n    let filteredItems,\n      templateCol,\n      parsedDim = getUCFirstString(dimension),\n      size,\n      trackDir = dimension === 'width' ? 'col' : 'row';\n\n    filteredItems = items.map(item => {\n      templateCol = item.style['gridTemplate' + getUCFirstString(trackDir === 'col' ? 'columns' : 'rows')];\n      if (getDisplayProperty(item) === 'grid' && /repeat\\(/g.test(templateCol)) {\n        size = parseRepeatFunction(templateCol)[1];\n      } else {\n        size = item.style['min' + parsedDim + 'Contribution'] || item.style[dimension] || 'auto';\n      }\n\n      return {\n        start: item[trackDir + 'Start'],\n        end: item[trackDir + 'End'],\n        size\n      }\n    });\n    return filteredItems;\n  },\n  updateMatrix = (grid, start, end) => {\n    let i,\n      j;\n\n    for (i = start.x; i < end.x; i++) {\n      for (j = start.y; j < end.y; j++) {\n        grid[i][j] = true;\n      }\n    }\n  },\n  getMaxRowColumn = (items) =>{\n    let maxRow = 1, maxColumn = 1;\n    items.forEach((item, itemIndex) => {\n      maxColumn = Math.max(isNaN(item.style.gridColumnStart) ? 0 : item.style.gridColumnStart, maxColumn, isNaN(item.style.gridColumnEnd * 1 - 1) ? 0 : item.style.gridColumnEnd*1 - 1);\n      maxRow = Math.max(isNaN(item.style.gridRowStart) ? 0 : item.style.gridRowStart, maxRow, isNaN(item.style.gridRowEnd * 1 - 1) ? 0 : item.style.gridRowEnd*1 - 1);\n    });\n    return {\n      maxRow,\n      maxColumn\n    };\n  };\nclass Grid {\n  constructor () {\n    this.setup();\n  }\n\n  setup () {\n    this._tsa = new TrackResolver();\n    this.props = {};\n    this._config = {\n      mapping: {}\n    };\n\n    return this;\n  }\n\n  set (key, value) {\n    this.props[key] = value;\n\n    return this;\n  }\n\n  getProps (key) {\n    return this.props[key];\n  }\n\n  getConfig (key) {\n    return this._config[key];\n  }\n\n  compute (_domTree) {\n    let domTree = _domTree || this.props.domTree;\n\n    this._sanitizeTracks(domTree)\n      ._sanitizeItems(domTree)\n      ._inflateTracks()\n      ._assignCoordinatesToCells(domTree);\n  }\n\n  _sanitizeTracks (_domTree = {}) {\n    let style = _domTree.style,\n      { gridTemplateRows, gridTemplateColumns } = style,\n      repeatResolvedTracks,\n      config = this._config,\n      trackInfo;\n\n    let {maxColumn, maxRow} = getMaxRowColumn(_domTree.children);\n    this.set(\"maxTracks\", maxRow);\n\n    trackInfo = this._fetchTrackInformation(gridTemplateRows);\n    config.mapping.row = {\n      nameToLineMap: trackInfo.nameToLineMap,\n      lineToNameMap: trackInfo.lineToNameMap\n    };\n    config.rowTracks = trackInfo.tracks;\n\n    this.set(\"maxTracks\", maxColumn);\n    trackInfo = this._fetchTrackInformation(gridTemplateColumns);\n    config.mapping.col = {\n      nameToLineMap: trackInfo.nameToLineMap,\n      lineToNameMap: trackInfo.lineToNameMap\n    };\n    config.colTracks = trackInfo.tracks;\n\n    return this;\n  }\n\n  _fetchTrackInformation (tracks = 'none') {\n    let i,\n      len,\n      splittedTrackInfo = tracks.split(templateSplitRegex),\n      nameList,\n      sizeList,\n      sanitizedTracks = [{}],\n      startLineNames,\n      endLineNames,\n      nameToLineMap = {},\n      lineToNameMap = {};\n\n    nameList = splittedTrackInfo.filter(track => {\n      if (track && typeof track === 'string' && track.length) {\n        len = track.length;\n        if (track[0] === '[' && track[len - 1] === ']') {\n          return true;\n        }\n        return false;\n      }\n      return true;\n    });\n\n    sizeList = splittedTrackInfo.filter(size => {\n      if (!size) return false;\n\n      len = (size + '').toLowerCase().replace(/px|fr/, '');\n      if (validSizes.indexOf(len) >= 0 || minmaxRegex.test(len) || !isNaN(len)) {\n        return true;\n      }\n      return false;\n    }).map(size => getCleanSize(size));\n\n    len = sizeList.length;\n    if(tracks === \"none\"){\n      len = this.getProps(\"maxTracks\");\n    }\n\n    for (i = 0; i < len; i++) {\n      startLineNames = (nameList[i] && nameList[i].replace(/\\[|\\]/g, '').split(' ').filter(name => name.length).map(name => name.trim())) || [i + 1 + ''];\n      endLineNames = (nameList[i + 1] && nameList[i + 1].replace(/\\[|\\]/g, '').split(' ').filter(name => name.length).map(name => name.trim())) || [i + 2 + ''];\n\n      sanitizedTracks.push({\n        start: i + 1,\n        end: i + 2,\n        size: sizeList[i] || 'auto'\n      });\n\n      // A line can have multiple names but a name can only be assigned to a single line\n      lineToNameMap[i + 1] = startLineNames;\n      lineToNameMap[i + 2] = endLineNames;\n      startLineNames.forEach(name => nameToLineMap[name] = i + 1);\n      endLineNames.forEach(name => nameToLineMap[name] = i + 2);\n      nameToLineMap[i + 1] = i + 1;\n      nameToLineMap[i + 2] = i + 2;\n    }\n\n    return {\n      tracks: sanitizedTracks,\n      nameToLineMap,\n      lineToNameMap\n    };\n  }\n\n  _sanitizeItems (_domTree) {\n    let domTree = (_domTree || this.props.domTree),\n      items = domTree.children || [],\n      mapping = this._config.mapping,\n      gridAutoFlow = domTree.style.gridAutoFlow || 'row',\n      rowNum = Object.keys(mapping.row.lineToNameMap).length,\n      colNum = Object.keys(mapping.col.lineToNameMap).length,\n      sanitizedItems = [],\n      autoFlowItems = [],\n      itemStyle,\n      gridMatrix = [[]],\n      freeCells = [],\n      cell,\n      item,\n      extraRows,\n      i,\n      j,\n      len;\n\n    for (i = 1; i <= rowNum; i++) {\n      gridMatrix.push([]);\n    }\n    for (i = 0, len = items.length; i < len; i++) {\n      itemStyle = items[i].style;\n\n      sanitizedItems.push({\n        ...items[i],\n        rowStart: mapping.row.nameToLineMap[itemStyle.gridRowStart],\n        rowEnd: mapping.row.nameToLineMap[itemStyle.gridRowEnd],\n        colStart: mapping.col.nameToLineMap[itemStyle.gridColumnStart],\n        colEnd: mapping.col.nameToLineMap[itemStyle.gridColumnEnd]\n      });\n      item = sanitizedItems[i];\n      updateMatrix(gridMatrix, {x: item.colStart, y: item.rowStart}, {x: item.colEnd, y: item.rowEnd});\n    }\n\n    autoFlowItems = sanitizedItems.filter(item => (!item.colStart || !item.rowStart));\n\n    /**\n     * @todo: Scope to improve code here.\n     */\n    if (autoFlowItems) {\n      if (gridAutoFlow === 'row') {\n        for (i = 1; i < rowNum; i++) {\n          for (j = 1; j < colNum; j++) {\n            if (!gridMatrix[i][j]) {\n              freeCells.push({row: i, col: j});\n            }\n          }\n        }\n\n        while (autoFlowItems.length && freeCells.length) {\n          item = autoFlowItems.shift();\n          cell = freeCells.shift();\n\n          item.rowStart = cell.row;\n          item.colStart = cell.col;\n          item.rowEnd = cell.row + 1;\n          item.colEnd = cell.col + 1;\n        }\n\n        extraRows = Math.ceil(autoFlowItems.length / colNum);\n        if (extraRows) {\n          while (extraRows--) {\n            domTree.style.gridTemplateRows += 'auto ';\n            mapping.row.nameToLineMap[rowNum + 1] = rowNum + 1;\n            mapping.row.nameToLineMap[rowNum + 2] = rowNum + 2;\n            rowNum++;\n            gridMatrix.push([]);\n          }\n          domTree.style.gridTemplateRows = domTree.style.gridTemplateRows.trim();\n\n          freeCells = [];\n          for (i = 1; i <= rowNum; i++) {\n            for (j = 1; j <= colNum; j++) {\n              if (!gridMatrix[i][j]) {\n                freeCells.push({row: i, col: j});\n              }\n            }\n          }\n          while (autoFlowItems.length) {\n            item = autoFlowItems.shift();\n            cell = freeCells.shift();\n\n            item.rowStart = cell.row;\n            item.colStart = cell.col;\n            item.rowEnd = cell.row + 1;\n            item.colEnd = cell.col + 1;\n          }\n        }\n      }\n    }\n\n    this._config.sanitizedItems = sanitizedItems;\n    return this;\n  }\n\n  _expandTracksIfRequired () {\n    return this;\n  }\n\n  _inflateTracks () {\n    let { sanitizedItems, colTracks, rowTracks } = this._config,\n      sizedTracks,\n      minHeightContribution = 0,\n      minWidthContribution = 0,\n      { domTree } = this.props,\n      { paddingStart, paddingEnd, paddingTop, paddingBottom, width, height } = domTree.style || {},\n      tsa = new TrackResolver();\n\n    if (!isNaN(+width)) {\n      width -= (paddingStart + paddingEnd);\n    }\n    sizedTracks = tsa.clear()\n      .set('tracks', colTracks)\n      .set('items', getItemSize(sanitizedItems, 'width'))\n      .set('containerSize', width || 'auto')\n      .resolveTracks();\n\n    colTracks.forEach((track, index) => {\n      track.calculatedStyle = sizedTracks[index];\n      minWidthContribution += sizedTracks[index].baseSize || 0;\n    });\n\n    this._solveUnresolvedChildren();\n\n    if (!isNaN(+height)) {\n      height -= (paddingTop + paddingBottom);\n    }\n    sizedTracks = tsa.clear()\n      .set('tracks', rowTracks)\n      .set('items', getItemSize(sanitizedItems, 'height'))\n      .set('containerSize', height || 'auto')\n      .resolveTracks();\n\n    rowTracks.forEach((track, index) => {\n      track.calculatedStyle = sizedTracks[index];\n      minHeightContribution += sizedTracks[index].baseSize || 0;\n    });\n\n    domTree.style.minHeightContribution = minHeightContribution;\n    domTree.style.minWidthContribution = minWidthContribution;\n    return this;\n  }\n\n  _solveUnresolvedChildren (_domTree) {\n    let domTree = _domTree || this.props.domTree,\n      childrenWithRepeatConfiguration = (domTree.unResolvedChildren || []).filter(child => /repeat\\(/g.test(child.style.gridTemplateColumns)\n      || /repeat\\(/g.test(child.style.gridTemplateRows)),\n      { colTracks, mapping } = this._config,\n      parentReference = this.getProps('parent'),\n      colTrackDp = [0],\n      resolvedTracks,\n      i,\n      len,\n      trackWidth,\n      parentInfo,\n      parsedWidthOfItem,\n      colStart,\n      colEnd;\n\n    if (!childrenWithRepeatConfiguration.length) {\n      return this;\n    }\n\n    for (i = 1, len = colTracks.length; i < len; i++) {\n      colTrackDp[i] = colTrackDp[i - 1] + colTracks[i].calculatedStyle.baseSize;\n    }\n\n    childrenWithRepeatConfiguration.forEach(child => {\n      // if (repeatFunctionRegex.test(child.style.gridTemplateColumns)) {\n      parsedWidthOfItem = parseRepeatFunction(child.style.gridTemplateColumns)[1];\n      colStart = mapping.col.nameToLineMap[child.style.gridColumnStart];\n      colEnd = mapping.col.nameToLineMap[child.style.gridColumnEnd];\n\n      trackWidth = colTrackDp[colEnd - 1 ] - colTrackDp[colStart - 1];\n      parentInfo = {\n        itemWidth: parsedWidthOfItem,\n        width: trackWidth\n      };\n\n      resolvedTracks = repeatResolver(child, parentInfo);\n\n      child.style.gridTemplateColumns = resolvedTracks.gridTemplateColumns;\n      child.style.gridTemplateRows = resolvedTracks.gridTemplateRows;\n\n      parentReference.gridLayoutEngine(child);\n      // }\n    });\n  }\n\n  _assignCoordinatesToCells (_domTree) {\n    let domTree = _domTree || this.props.domTree,\n      { sanitizedItems, rowTracks, colTracks } = this._config,\n      item,\n      len,\n      i,\n      { justifyItems, alignItems, paddingStart, paddingEnd, paddingTop, paddingBottom } = domTree.style,\n      trackWidth,\n      trackHeight,\n      width,\n      height,\n      x,\n      y,\n      rowTrackdp = [paddingStart],\n      colTrackdp = [paddingTop];\n\n    for (i = 1, len = rowTracks.length; i < len; i++) {\n      rowTrackdp[i] = rowTrackdp[i - 1] + rowTracks[i].calculatedStyle.baseSize;\n    }\n\n    for (i = 1, len = colTracks.length; i < len; i++) {\n      colTrackdp[i] = colTrackdp[i - 1] + colTracks[i].calculatedStyle.baseSize;\n    }\n    domTree.layout = {\n      x: 0,\n      y: 0,\n      width: isNaN(domTree.style.width) ? colTrackdp[colTrackdp.length - 1] : domTree.style.width,\n      height: isNaN(domTree.style.height) ? rowTrackdp[rowTrackdp.length - 1] : domTree.style.height\n    };\n    (domTree.children || []).forEach((child, index) => {\n      item = sanitizedItems[index];\n      trackWidth = colTrackdp[item.colEnd - 1] - colTrackdp[item.colStart - 1];\n      trackHeight = rowTrackdp[item.rowEnd - 1] - rowTrackdp[item.rowStart - 1];\n\n      width = isNaN(+child.style.width) ? trackWidth : +child.style.width;\n      height = isNaN(+child.style.height) ? trackHeight : +child.style.height;\n\n      switch (justifyItems || child.style.justifySelf) {\n      case CENTER:\n        x = colTrackdp[item.colStart - 1] + (trackWidth / 2) - (width / 2); break;\n      case END:\n        x = colTrackdp[item.colEnd - 1] - width; break;\n      case STRETCH:\n        width = trackWidth;\n        x = colTrackdp[item.colStart - 1]; break;\n      default:\n        x = colTrackdp[item.colStart - 1];\n      }\n\n      switch (alignItems || child.style.alignSelf) {\n      case CENTER:\n        y = rowTrackdp[item.rowStart - 1] + (trackHeight / 2) - (height / 2); break;\n      case END:\n        y = rowTrackdp[item.rowEnd - 1] - height; break;\n      case STRETCH:\n        height = trackHeight;\n        y = rowTrackdp[item.rowStart - 1]; break;\n      default:\n        y = rowTrackdp[item.rowStart - 1];\n      }\n\n      x += pluckNumber(item.style.paddingStart, item.style.padding, 0);\n      y += pluckNumber(item.style.paddingTop, item.style.padding, 0);\n\n      child.layout = {\n        x,\n        y,\n        x2: x + width,\n        y2: y + height,\n        width,\n        height\n      };\n    });\n  }\n}\n\nconst replaceWithAbsValue = (styleTrack = '', calculatedTrack) => {\n    let trackSplitAr = styleTrack.split(templateSplitRegex).filter(track => track && !!track.trim()),\n      trackWithAbsValue = '',\n      counter = 1;\n\n    if (trackSplitAr.length && !(/repeat\\(/.test(styleTrack))) {\n      trackSplitAr.forEach(track => {\n        if (validSizes.indexOf(track) > -1 || /[0-9]fr/.test(track) || minmaxRegex.test(track) || !isNaN(track)) {\n          trackWithAbsValue += calculatedTrack[counter].calculatedStyle.baseSize + ' ';\n          counter++;\n        } else {\n          trackWithAbsValue += track + ' ';\n        }\n      });\n    } else {\n      calculatedTrack.forEach(track => {\n        if (isNaN(track.calculatedStyle.baseSize)) return;\n\n        trackWithAbsValue += (track.calculatedStyle.baseSize + ' ');\n      });\n    }\n\n    return trackWithAbsValue.trim();\n  },\n  updateDomTreeWithResolvedValues = (domTree, grid) => {\n    let containerStyle = domTree.style,\n      rowTracks = grid.getConfig('rowTracks'),\n      colTracks = grid.getConfig('colTracks'),\n      mapping = grid.getConfig('mapping'),\n      { gridTemplateRows, gridTemplateColumns } = containerStyle,\n      child,\n      i,\n      j,\n      len,\n      rowTrackSum,\n      colTrackSum,\n      rowStart,\n      rowEnd,\n      colStart,\n      colEnd;\n\n    domTree.style.gridTemplateRows = replaceWithAbsValue(gridTemplateRows, rowTracks);\n    domTree.style.gridTemplateColumns = replaceWithAbsValue(gridTemplateColumns, colTracks);\n\n    for (i = 0, len = (domTree.children || []).length; i < len; i++) {\n      child = domTree.children[i];\n      if (getDisplayProperty(child)) {\n        child.style.gridTemplateColumns = child.userGivenStyles.gridTemplateColumns;\n        child.style.gridTemplateRows = child.userGivenStyles.gridTemplateRows;\n        if (isNaN(child.userGivenStyles.width)) {\n          colStart = child.style.gridColumnStart;\n          colEnd = child.style.gridColumnEnd;\n\n          colStart = mapping.col.nameToLineMap[colStart];\n          colEnd = mapping.col.nameToLineMap[colEnd];\n\n          for (j = colStart, colTrackSum = 0; j < colEnd; j++) {\n            colTrackSum += colTracks[j].calculatedStyle.baseSize;\n          }\n          child.style.width = colTrackSum;\n        }\n        if (isNaN(child.userGivenStyles.height)) {\n          rowStart = child.style.gridRowStart;\n          rowEnd = child.style.gridRowEnd;\n\n          rowStart = mapping.row.nameToLineMap[rowStart];\n          rowEnd = mapping.row.nameToLineMap[rowEnd];\n\n          for (j = rowStart, rowTrackSum = 0; j < rowEnd; j++) {\n            rowTrackSum += rowTracks[j].calculatedStyle.baseSize;\n          }\n          child.style.height = rowTrackSum;\n        }\n      }\n    }\n\n    return domTree;\n  };\n\nfunction computeGridLayout (domTree, count = 1) {\n  let i,\n    len,\n    style = domTree.style,\n    child,\n    grid;\n\n  if (!domTree || !domTree.style) {\n    return;\n  }\n\n  if (!domTree.userGivenStyles) {\n    domTree.style.width = isNaN(domTree.style.width) ? 'auto' : domTree.style.width;\n    domTree.style.height = isNaN(domTree.style.height) ? 'auto' : domTree.style.height;\n\n    style.paddingStart = pluckNumber(style.paddingStart, style.padding, 0);\n    style.paddingEnd = pluckNumber(style.paddingEnd, style.padding, 0);\n    style.paddingTop = pluckNumber(style.paddingTop, style.padding, 0);\n    style.paddingBottom = pluckNumber(style.paddingBottom, style.padding, 0);\n\n    domTree.userGivenStyles = {\n      gridTemplateColumns: domTree.style.gridTemplateColumns,\n      gridTemplateRows: domTree.style.gridTemplateRows,\n      width: domTree.style.width,\n      height: domTree.style.height\n    };\n  }\n\n  domTree.unResolvedChildren = [];\n  for (i = 0, len = (domTree.children && domTree.children.length); i < len; i++) {\n    child = domTree.children[i];\n    if (getDisplayProperty(child)) {\n      if (validNestedGrid(child)) {\n        this.compute(child);\n      } else {\n        domTree.unResolvedChildren.push(child);\n      }\n    }\n  }\n\n  grid = new Grid();\n  grid.set('domTree', domTree)\n    .set('parent', this)\n    .compute();\n\n  if (count < 2) {\n    this.gridLayoutEngine(updateDomTreeWithResolvedValues(domTree, grid), 2);\n  }\n\n  return domTree;\n}\n\nexport {\n  computeGridLayout\n};\n","const repeatDetectionRegex = /repeat\\(/g,\n  parseRepeatFunction = repeatStr => {\n    return repeatStr.split(/\\(|\\)/g)[1].split(',').map(arg => arg && arg.trim());\n  };\n\nfunction repeatResolver (domTree, parentInfo) {\n  let { style, children } = domTree,\n    rowWidth = 0,\n    numOfRows,\n    itemInARow = 0,\n    // itemWidth,\n    repeatStyle = 'auto-fit',\n    newGridTemplateColumns = '',\n    newGridTemplateRows = '',\n    i,\n    len,\n    height = 0,\n    { itemWidth, width } = parentInfo;\n\n  width = isNaN(+width) ? 0 : +width;\n\n  children.forEach(child => (height = Math.max(height, +child.style.height || 0)))\n  // [repeatStyle, itemWidth] = parseRepeatFunction(gridTemplateColumns);\n  itemWidth = +itemWidth;\n\n  if (repeatStyle === 'auto-fit') {\n    rowWidth += itemWidth;\n    newGridTemplateColumns += (itemWidth + ' ');\n    itemInARow = 1;\n    for (i = 1, len = children.length; i < len; i++) {\n      if (rowWidth + itemWidth > width) {\n        break;\n      }\n      rowWidth += itemWidth;\n      newGridTemplateColumns += (itemWidth + ' ');\n    }\n\n    itemInARow = i;\n    numOfRows = Math.ceil(len / itemInARow);\n\n    while (numOfRows--) {\n      newGridTemplateRows += height + ' ';\n    }\n  }\n\n  return {\n    gridTemplateColumns: newGridTemplateColumns.trim(),\n    gridTemplateRows: newGridTemplateRows.trim()\n  }\n}\n\nexport {\n  repeatResolver\n};\n","import { getDisplayProperty, cloneObject, attachLayoutInformation } from \"./utils\";\nimport { DISPLAY_GRID, DISPLAY_FLEX } from \"./utils/constants\";\nimport { computeGridLayout } from \"./grid\";\n\nclass LayoutEngine {\n  constructor () {\n    this.gridLayoutEngine = computeGridLayout;\n  }\n\n  compute (domTree) {\n    switch (getDisplayProperty(domTree)) {\n    \n    case DISPLAY_GRID: return this.gridLayoutEngine(domTree);\n    case DISPLAY_FLEX: return this.gridLayoutEngine(domTree);\n    default:\n      // Probably throw unsupported error?\n      return this.gridLayoutEngine(domTree);\n\n    }\n  }\n}\n\n/**\n * Public API used externally to provide input to layout engine\n * \n * @param {Object} domTree Object containing the layout node information\n */\nconst computeLayout = (domTree) => {\n  const mason = new LayoutEngine();\n  let clonedDomTree = cloneObject(domTree),\n    calculatedTree;\n\n  clonedDomTree.root = true;\n  calculatedTree = mason.compute(clonedDomTree);\n  attachLayoutInformation(domTree, calculatedTree);\n\n  return domTree;\n};\n\nexport {\n  computeLayout\n};\n","import { computeLayout } from './mason';\n\nexport {\n  computeLayout\n};\n"],"sourceRoot":""}