{"version":3,"sources":["webpack://faber/webpack/universalModuleDefinition","webpack://faber/webpack/bootstrap","webpack://faber/./src/faber.js","webpack://faber/./src/grid/helpers/repeatResolver.js","webpack://faber/./src/grid/index.js","webpack://faber/./src/grid/track-sizing.js","webpack://faber/./src/index.js","webpack://faber/./src/utils/constants.js","webpack://faber/./src/utils/index.js"],"names":["LayoutEngine","gridLayoutEngine","computeGridLayout","domTree","getDisplayProperty","DISPLAY_GRID","DISPLAY_FLEX","computeLayout","faber","clonedDomTree","cloneObject","calculatedTree","root","compute","attachLayoutInformation","repeatResolver","parentInfo","children","rowWidth","numOfRows","itemInARow","repeatStyle","newGridTemplateColumns","newGridTemplateRows","i","len","height","itemWidth","width","isNaN","forEach","child","Math","max","style","length","ceil","gridTemplateColumns","trim","gridTemplateRows","validSizes","minmaxRegex","templateSplitRegex","getUCFirstString","str","charAt","toUpperCase","slice","validNestedGrid","tree","test","parseRepeatFunction","repeatStr","split","map","arg","getCleanSize","size","sizeAr","getItemSize","items","dimension","filteredItems","templateCol","parsedDim","trackDir","item","start","end","updateMatrix","grid","j","x","y","getMaxRowColumn","maxRow","maxColumn","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","Grid","setup","_tsa","TrackResolver","props","_config","mapping","key","value","_domTree","_sanitizeTracks","_sanitizeItems","_inflateTracks","_assignCoordinatesToCells","config","trackInfo","set","_fetchTrackInformation","row","nameToLineMap","lineToNameMap","rowTracks","tracks","col","colTracks","splittedTrackInfo","nameList","sizeList","sanitizedTracks","startLineNames","endLineNames","filter","track","toLowerCase","replace","indexOf","getProps","name","push","gridAutoFlow","rowNum","Object","keys","colNum","sanitizedItems","autoFlowItems","itemStyle","gridMatrix","freeCells","cell","extraRows","rowStart","rowEnd","colStart","colEnd","sanitizedItem","shift","sizedTracks","minHeightContribution","minWidthContribution","paddingStart","paddingEnd","paddingTop","paddingBottom","tsa","clear","resolveTracks","index","calculatedStyle","baseSize","_solveUnresolvedChildren","childrenWithRepeatConfiguration","unResolvedChildren","parentReference","colTrackDp","resolvedTracks","trackWidth","parsedWidthOfItem","justifyItems","alignItems","trackHeight","rowTrackdp","colTrackdp","layout","justifySelf","CENTER","END","STRETCH","alignSelf","pluckNumber","padding","x2","y2","replaceWithAbsValue","styleTrack","calculatedTrack","trackSplitAr","trackWithAbsValue","counter","updateDomTreeWithResolvedValues","containerStyle","getConfig","rowTrackSum","colTrackSum","userGivenStyles","count","getMultiplierOfFr","_frSpaceDistributorHelper","totalSpaceUsed","containerSize","freeSpace","spacePerFrTrack","eligibleTracks","totalFrTrackRatio","multiplier","_intrinsicSpaceDistributorHelper","spacePerIntrinsicTrack","frozenTrack","minMaxTracks","growthLimit","type","Infinity","sort","a","b","gap1","gap2","min","frozen","info","_initTrackSize","_initItems","_tracks","trackAr","frTracks","intrinsicTracks","Array","isArray","_items","nonSpanningItemStartIndex","validItems","autoFlow","_getParentSize","parentTracks","widthOfParentTracks","_placeNonSpanningItems","_placeSpanningItems","_distributeFreeSpace","nonSpanningItems","trackIndex","spanningItems","trackSizedp","sizeConsumed","sizeLeft","sizePerTrack","availableTracks","hasFrTrack","trackId","START","ATOMIC_DATA_TYPE","UNDEF","display","arr","cloneObj","baseTree","l","arguments","Number"],"mappings":"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","file":"faber.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"faber\"] = factory();\n\telse\n\t\troot[\"faber\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import { getDisplayProperty, cloneObject, attachLayoutInformation } from './utils';\nimport { DISPLAY_GRID, DISPLAY_FLEX } from './utils/constants';\nimport { computeGridLayout } from './grid';\n\nclass LayoutEngine {\n  constructor () {\n    this.gridLayoutEngine = computeGridLayout;\n  }\n\n  compute (domTree) {\n    switch (getDisplayProperty(domTree)) {\n    case DISPLAY_GRID: return this.gridLayoutEngine(domTree);\n    case DISPLAY_FLEX: return this.gridLayoutEngine(domTree);\n    default:\n      // Probably throw unsupported error?\n      return this.gridLayoutEngine(domTree);\n    }\n  }\n}\n\n/**\n * Public API used externally to provide input to layout engine\n *\n * @param {Object} domTree Object containing the layout node information\n */\nconst computeLayout = (domTree) => {\n  const faber = new LayoutEngine();\n  let clonedDomTree = cloneObject(domTree),\n    calculatedTree;\n\n  clonedDomTree.root = true;\n  calculatedTree = faber.compute(clonedDomTree);\n  attachLayoutInformation(domTree, calculatedTree);\n\n  return domTree;\n};\n\nexport {\n  computeLayout\n};\n","/**\n * Resolve repeat configurations if provided in gridTemplateRows or gridTemplateColumns.\n * Based on the size provided by the parent, this method re-defines the gridTemplateRows and/or\n * gridTemplateColumns attributes of the grid container.\n *\n * @param   {Object} domTree\n *          Object representing the node. The value of gridTemplateColumns and gridTemplateRows are taken from the style\n *          object of node\n * @param   {Object} parentInfo\n *          Object containing the following properties\n *          {\n *            itemWidth: width of item\n *            width: width of track\n *          }\n * @returns {Object}\n *          {\n *            gridTemplateColumns: resolved gridTemplateColumns\n *            gridTemplateRows: resolved gridTemplateRows\n *          }\n */\nfunction repeatResolver (domTree, parentInfo) {\n  let { children } = domTree,\n    rowWidth = 0,\n    numOfRows,\n    itemInARow = 0,\n    // itemWidth,\n    repeatStyle = 'auto-fit',\n    newGridTemplateColumns = '',\n    newGridTemplateRows = '',\n    i,\n    len,\n    height = 0,\n    { itemWidth, width } = parentInfo;\n\n  width = isNaN(+width) ? 0 : +width;\n\n  children.forEach(child => (height = Math.max(height, +child.style.height || 0)));\n  // [repeatStyle, itemWidth] = parseRepeatFunction(gridTemplateColumns);\n  itemWidth = +itemWidth;\n\n  if (repeatStyle === 'auto-fit') {\n    rowWidth += itemWidth;\n    newGridTemplateColumns += (itemWidth + ' ');\n    itemInARow = 1;\n    for (i = 1, len = children.length; i < len; i++) {\n      if (rowWidth + itemWidth > width) {\n        break;\n      }\n      rowWidth += itemWidth;\n      newGridTemplateColumns += (itemWidth + ' ');\n    }\n\n    itemInARow = i;\n    numOfRows = Math.ceil(len / itemInARow);\n\n    while (numOfRows--) {\n      newGridTemplateRows += height + ' ';\n    }\n  }\n\n  return {\n    gridTemplateColumns: newGridTemplateColumns.trim(),\n    gridTemplateRows: newGridTemplateRows.trim()\n  };\n}\n\nexport {\n  repeatResolver\n};\n","import { getDisplayProperty, pluckNumber } from '../utils';\nimport TrackResolver from './track-sizing';\nimport { CENTER, END, STRETCH } from '../utils/constants';\nimport { repeatResolver } from './helpers/repeatResolver';\n\nconst validSizes = ['auto', 'none'],\n  minmaxRegex = /minmax/,\n  // repeatFunctionRegex = /repeat\\(/g,\n  // templateSplitRegex = /\\s(\\[.*\\])*(\\(.*\\))*/g,\n  templateSplitRegex = ' ',\n  getUCFirstString = str => (str.charAt(0).toUpperCase() + str.slice(1)),\n  validNestedGrid = tree => {\n    let { gridTemplateColumns, gridTemplateRows } = tree.style || {};\n\n    if (/repeat\\(/g.test(gridTemplateColumns) || /repeat\\(/g.test(gridTemplateRows)) {\n      return false;\n    }\n    return true;\n  },\n  parseRepeatFunction = repeatStr => {\n    return repeatStr.split(/\\(|\\)/g)[1].split(',').map(arg => arg && arg.trim());\n  },\n  getCleanSize = size => {\n    size = size.trim();\n    if (size === 'auto') return size;\n    if (!isNaN(+size)) return +size;\n\n    if (minmaxRegex.test(size)) {\n      let sizeAr = size.split(/\\(|\\)/g)[1].split(',');\n\n      return [\n        sizeAr[0].trim(),\n        sizeAr[1].trim()\n      ];\n    }\n\n    return size;\n  },\n  getItemSize = (items, dimension) => {\n    let filteredItems,\n      templateCol,\n      parsedDim = getUCFirstString(dimension),\n      size,\n      trackDir = dimension === 'width' ? 'col' : 'row';\n\n    filteredItems = items.map(item => {\n      templateCol = item.style['gridTemplate' + getUCFirstString(trackDir === 'col' ? 'columns' : 'rows')];\n      if (getDisplayProperty(item) === 'grid' && /repeat\\(/g.test(templateCol)) {\n        size = parseRepeatFunction(templateCol)[1];\n      } else {\n        size = item.style['min' + parsedDim + 'Contribution'] || item.style[dimension] || 'auto';\n      }\n\n      return {\n        start: item[trackDir + 'Start'],\n        end: item[trackDir + 'End'],\n        size\n      };\n    });\n    return filteredItems;\n  },\n  updateMatrix = (grid, start, end) => {\n    let i,\n      j;\n\n    for (i = start.x; i < end.x; i++) {\n      for (j = start.y; j < end.y; j++) {\n        grid[i][j] = true;\n      }\n    }\n  },\n  getMaxRowColumn = items => {\n    let maxRow = 1, maxColumn = 1;\n    items.forEach((item) => {\n      maxColumn = Math.max(isNaN(item.style.gridColumnStart) ? 0 : item.style.gridColumnStart, maxColumn, isNaN(item.style.gridColumnEnd * 1 - 1) ? 0 : item.style.gridColumnEnd * 1 - 1);\n      maxRow = Math.max(isNaN(item.style.gridRowStart) ? 0 : item.style.gridRowStart, maxRow, isNaN(item.style.gridRowEnd * 1 - 1) ? 0 : item.style.gridRowEnd * 1 - 1);\n    });\n    return {\n      maxRow,\n      maxColumn\n    };\n  };\nclass Grid {\n  /**\n   * Creates an instance of Grid. Initializes the props and _config object.\n   * @memberof Grid\n   */\n  constructor () {\n    this.setup();\n  }\n\n  /**\n   * Initializes _config, props objects. Also initializes and stores a new instance of TrackResolver.\n   *\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  setup () {\n    this._tsa = new TrackResolver();\n    this.props = {};\n    this._config = {\n      mapping: {}\n    };\n\n    return this;\n  }\n\n  /**\n   * Setter method to set props.\n   *\n   * @param   {string} key\n   *          key represents the name by which the value is to be stored in props object.\n   * @param   {any} value\n   *          value is the information(can be anything) that has to be stored against the key.\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  set (key, value) {\n    this.props[key] = value;\n\n    return this;\n  }\n\n  /**\n   * Getter method to fetch props.\n   *\n   * @param   {string} key\n   *          key of the value which has to be fetched.\n   * @returns {any}\n   *          value corresponding to the key in props object\n   * @memberof Grid\n   */\n  getProps (key) {\n    return this.props[key];\n  }\n\n  /**\n   * Getter method to fetch config.\n   *\n   * @param   {string} key\n   *          key of the value which has to be fetched.\n   * @returns {any}\n   *          alue corresponding to the key in _config object\n   * @memberof Grid\n   */\n  getConfig (key) {\n    return this._config[key];\n  }\n\n  /**\n   * compute method is called to calculate the layout. This is the driver API.\n   * 1. Tracks(rows and columns) are sanitized. Sanitization of tracks consists of going through the child nodes to get an overall estimate\n   *    regarding the number of tracks that are required.\n   * 2. Items(child nodes) are sanitized. Any item without any proper gridStart and gridEnd values gets sanitized here.\n   * 3. Track solving algrithm is run for both columns and rows to calculate the size each track will get.\n   * 4. Once tracks are resolved and all tracks have their size, all the grid items are assigned their width, height, x and y(when applicable)\n   *\n   * @param {Object} _domTree\n   *        Full node tree consisting of grid container and grid items.\n   * @memberof Grid\n   */\n  compute (_domTree) {\n    let domTree = _domTree || this.props.domTree;\n\n    this._sanitizeTracks(domTree)\n      ._sanitizeItems(domTree)\n      ._inflateTracks()\n      ._assignCoordinatesToCells(domTree);\n  }\n\n  /**\n   * Rows and columns are refered as tracks in css-grid terminology.\n   * Track sanitization is required to account for any changes in the number of tracks by considering the grid items.\n   * Items are iterated to check if all the times can be accomodated within the user-defined grid cells. If not, tracks will\n   * be increased.\n   *\n   * @param   {Object} [_domTree={}]\n   *          Full node tree consisting of grid container and grid items.\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  _sanitizeTracks (_domTree = {}) {\n    let style = _domTree.style,\n      { gridTemplateRows, gridTemplateColumns } = style,\n      config = this._config,\n      trackInfo,\n      { maxColumn, maxRow } = getMaxRowColumn(_domTree.children);\n\n    this.set('maxTracks', maxRow);\n\n    trackInfo = this._fetchTrackInformation(gridTemplateRows);\n    config.mapping.row = {\n      nameToLineMap: trackInfo.nameToLineMap,\n      lineToNameMap: trackInfo.lineToNameMap\n    };\n    config.rowTracks = trackInfo.tracks;\n\n    this.set('maxTracks', maxColumn);\n    trackInfo = this._fetchTrackInformation(gridTemplateColumns);\n    config.mapping.col = {\n      nameToLineMap: trackInfo.nameToLineMap,\n      lineToNameMap: trackInfo.lineToNameMap\n    };\n    config.colTracks = trackInfo.tracks;\n\n    return this;\n  }\n\n  /**\n   * Any track is bounded by two lines, which are called grid lines. A grid line can have multiple names.\n   * To make calculations more easier, a map is maintained between line names and line numbers.\n   *\n   * @param   {string} [tracks='none']\n   *          gridTemplateRows or gridTemplateColumns(user provided values)\n   * @returns {Object}\n   *          tracks: Array of tracks where track has it's start, end and size(provided by user) specified\n   *          nameToLineMap: Object where key is the name and the value is the line number\n   *          lineToNameMap: Object where key is the number and the value is the name\n   * @memberof Grid\n   */\n  _fetchTrackInformation (tracks = 'none') {\n    let i,\n      len,\n      splittedTrackInfo = tracks.split(templateSplitRegex),\n      nameList,\n      sizeList,\n      sanitizedTracks = [{}],\n      startLineNames,\n      endLineNames,\n      nameToLineMap = {},\n      lineToNameMap = {};\n\n    nameList = splittedTrackInfo.filter(track => {\n      if (track && typeof track === 'string' && track.length) {\n        len = track.length;\n        if (track[0] === '[' && track[len - 1] === ']') {\n          return true;\n        }\n        return false;\n      }\n      return true;\n    });\n\n    sizeList = splittedTrackInfo.filter(size => {\n      if (!size) return false;\n\n      len = (size + '').toLowerCase().replace(/px|fr/, '');\n      if (validSizes.indexOf(len) >= 0 || minmaxRegex.test(len) || !isNaN(len)) {\n        return true;\n      }\n      return false;\n    }).map(size => getCleanSize(size));\n\n    len = sizeList.length;\n    if (tracks === 'none') {\n      len = this.getProps('maxTracks');\n    }\n\n    for (i = 0; i < len; i++) {\n      startLineNames = (nameList[i] && nameList[i].replace(/\\[|\\]/g, '').split(' ').filter(name => name.length).map(name => name.trim())) || [i + 1 + ''];\n      endLineNames = (nameList[i + 1] && nameList[i + 1].replace(/\\[|\\]/g, '').split(' ').filter(name => name.length).map(name => name.trim())) || [i + 2 + ''];\n\n      sanitizedTracks.push({\n        start: i + 1,\n        end: i + 2,\n        size: sizeList[i] || 'auto'\n      });\n\n      // A line can have multiple names but a name can only be assigned to a single line\n      lineToNameMap[i + 1] = startLineNames;\n      lineToNameMap[i + 2] = endLineNames;\n      startLineNames.forEach(name => (nameToLineMap[name] = i + 1));\n      endLineNames.forEach(name => (nameToLineMap[name] = i + 2));\n      nameToLineMap[i + 1] = i + 1;\n      nameToLineMap[i + 2] = i + 2;\n    }\n\n    return {\n      tracks: sanitizedTracks,\n      nameToLineMap,\n      lineToNameMap\n    };\n  }\n\n  /**\n   * Sanitization of grid items. The gridRowStart and gridColumnStart values are replaced by the line numbers. Also,\n   * if any item do not have any gridRowStart and/or gridColumnEnd values mentioned, they are placed accordingly in\n   * empty cells in rowwise or columnwise manner, based on the value of gridAutoFlow.\n   *\n   * @param   {Object} _domTree\n   *          Full node tree consisting of grid container and grid items.\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  _sanitizeItems (_domTree) {\n    let domTree = (_domTree || this.props.domTree),\n      items = domTree.children || [],\n      mapping = this._config.mapping,\n      gridAutoFlow = domTree.style.gridAutoFlow || 'row',\n      rowNum = Object.keys(mapping.row.lineToNameMap).length,\n      colNum = Object.keys(mapping.col.lineToNameMap).length,\n      sanitizedItems = [],\n      autoFlowItems = [],\n      itemStyle,\n      gridMatrix = [[]],\n      freeCells = [],\n      cell,\n      item,\n      extraRows,\n      i,\n      j,\n      len;\n\n    for (i = 1; i <= rowNum; i++) {\n      gridMatrix.push([]);\n    }\n    for (i = 0, len = items.length; i < len; i++) {\n      itemStyle = items[i].style;\n\n      sanitizedItems.push({\n        ...items[i],\n        rowStart: mapping.row.nameToLineMap[itemStyle.gridRowStart],\n        rowEnd: mapping.row.nameToLineMap[itemStyle.gridRowEnd],\n        colStart: mapping.col.nameToLineMap[itemStyle.gridColumnStart],\n        colEnd: mapping.col.nameToLineMap[itemStyle.gridColumnEnd]\n      });\n      item = sanitizedItems[i];\n      updateMatrix(gridMatrix, {x: item.colStart, y: item.rowStart}, {x: item.colEnd, y: item.rowEnd});\n    }\n\n    autoFlowItems = sanitizedItems.filter(sanitizedItem => (!sanitizedItem.colStart || !sanitizedItem.rowStart));\n\n    /**\n     * @todo: Scope to improve code here.\n     */\n    if (autoFlowItems) {\n      if (gridAutoFlow === 'row') {\n        for (i = 1; i < rowNum; i++) {\n          for (j = 1; j < colNum; j++) {\n            if (!gridMatrix[i][j]) {\n              freeCells.push({row: i, col: j});\n            }\n          }\n        }\n\n        while (autoFlowItems.length && freeCells.length) {\n          item = autoFlowItems.shift();\n          cell = freeCells.shift();\n\n          item.rowStart = cell.row;\n          item.colStart = cell.col;\n          item.rowEnd = cell.row + 1;\n          item.colEnd = cell.col + 1;\n        }\n\n        extraRows = Math.ceil(autoFlowItems.length / colNum);\n        if (extraRows) {\n          while (extraRows--) {\n            domTree.style.gridTemplateRows += 'auto ';\n            mapping.row.nameToLineMap[rowNum + 1] = rowNum + 1;\n            mapping.row.nameToLineMap[rowNum + 2] = rowNum + 2;\n            rowNum++;\n            gridMatrix.push([]);\n          }\n          domTree.style.gridTemplateRows = domTree.style.gridTemplateRows.trim();\n\n          freeCells = [];\n          for (i = 1; i <= rowNum; i++) {\n            for (j = 1; j <= colNum; j++) {\n              if (!gridMatrix[i][j]) {\n                freeCells.push({row: i, col: j});\n              }\n            }\n          }\n          while (autoFlowItems.length) {\n            item = autoFlowItems.shift();\n            cell = freeCells.shift();\n\n            item.rowStart = cell.row;\n            item.colStart = cell.col;\n            item.rowEnd = cell.row + 1;\n            item.colEnd = cell.col + 1;\n          }\n        }\n      }\n    }\n\n    this._config.sanitizedItems = sanitizedItems;\n    return this;\n  }\n\n  /**\n   * Track solving algorithm is used to calculate the size of each track. First the column tracks are resolved, then the\n   * row tracks. For track solving algorithm to run, it is important to resolve all the nested grids. Solving the nested\n   * grids allows to consider their min-content contribution while solving tracks of parent grid.\n   *\n   * An exception arises if a nested grid has repeat in either of the gridTemplateColumns or gridTemplateRows property.\n   * In that case, the nested grid is solved once the column tracks of the parent grid is solved.\n   *\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  _inflateTracks () {\n    let { sanitizedItems, colTracks, rowTracks } = this._config,\n      sizedTracks,\n      minHeightContribution = 0,\n      minWidthContribution = 0,\n      { domTree } = this.props,\n      { paddingStart, paddingEnd, paddingTop, paddingBottom, width, height } = domTree.style || {},\n      tsa = new TrackResolver();\n\n    if (!isNaN(+width)) {\n      width -= (paddingStart + paddingEnd);\n    }\n    sizedTracks = tsa.clear()\n      .set('tracks', colTracks)\n      .set('items', getItemSize(sanitizedItems, 'width'))\n      .set('containerSize', width || 'auto')\n      .resolveTracks();\n\n    colTracks.forEach((track, index) => {\n      track.calculatedStyle = sizedTracks[index];\n      minWidthContribution += sizedTracks[index].baseSize || 0;\n    });\n\n    this._solveUnresolvedChildren();\n\n    if (!isNaN(+height)) {\n      height -= (paddingTop + paddingBottom);\n    }\n    sizedTracks = tsa.clear()\n      .set('tracks', rowTracks)\n      .set('items', getItemSize(sanitizedItems, 'height'))\n      .set('containerSize', height || 'auto')\n      .resolveTracks();\n\n    rowTracks.forEach((track, index) => {\n      track.calculatedStyle = sizedTracks[index];\n      minHeightContribution += sizedTracks[index].baseSize || 0;\n    });\n\n    domTree.style.minHeightContribution = minHeightContribution;\n    domTree.style.minWidthContribution = minWidthContribution;\n    return this;\n  }\n\n  /**\n   * The grid items which are also grid containers(nested grids) and has repeat() configuration in either of\n   * gridTenplateColumns or gridTemplateRows attribute are solved after the column tracks of the parents are solved.\n   *\n   * @param   {Object} _domTree\n   *          Full node tree consisting of grid container and grid items.\n   * @returns {Grid}\n   *          Reference of the class instance.\n   * @memberof Grid\n   */\n  _solveUnresolvedChildren (_domTree) {\n    let domTree = _domTree || this.props.domTree,\n      childrenWithRepeatConfiguration = (domTree.unResolvedChildren || []).filter(child => /repeat\\(/g.test(child.style.gridTemplateColumns)\n      || /repeat\\(/g.test(child.style.gridTemplateRows)),\n      { colTracks, mapping } = this._config,\n      parentReference = this.getProps('parent'),\n      colTrackDp = [0],\n      resolvedTracks,\n      i,\n      len,\n      trackWidth,\n      parentInfo,\n      parsedWidthOfItem,\n      colStart,\n      colEnd;\n\n    if (!childrenWithRepeatConfiguration.length) {\n      return this;\n    }\n\n    for (i = 1, len = colTracks.length; i < len; i++) {\n      colTrackDp[i] = colTrackDp[i - 1] + colTracks[i].calculatedStyle.baseSize;\n    }\n\n    childrenWithRepeatConfiguration.forEach(child => {\n      // if (repeatFunctionRegex.test(child.style.gridTemplateColumns)) {\n      parsedWidthOfItem = parseRepeatFunction(child.style.gridTemplateColumns)[1];\n      colStart = mapping.col.nameToLineMap[child.style.gridColumnStart];\n      colEnd = mapping.col.nameToLineMap[child.style.gridColumnEnd];\n\n      trackWidth = colTrackDp[colEnd - 1] - colTrackDp[colStart - 1];\n      parentInfo = {\n        itemWidth: parsedWidthOfItem,\n        width: trackWidth\n      };\n\n      resolvedTracks = repeatResolver(child, parentInfo);\n\n      child.style.gridTemplateColumns = resolvedTracks.gridTemplateColumns;\n      child.style.gridTemplateRows = resolvedTracks.gridTemplateRows;\n\n      parentReference.gridLayoutEngine(child);\n      // }\n    });\n\n    return this;\n  }\n\n  /**\n   * After the grid is resolved, the items and the container should receive their dimensions(width, height) and positions(x, y).\n   * This values are calculated after considering the justifyItem and alignItem attributes.\n   *\n   * @param {Object} _domTree\n   * @memberof Grid\n   */\n  _assignCoordinatesToCells (_domTree) {\n    let domTree = _domTree || this.props.domTree,\n      { sanitizedItems, rowTracks, colTracks } = this._config,\n      item,\n      len,\n      i,\n      { justifyItems, alignItems, paddingStart, paddingTop } = domTree.style,\n      trackWidth,\n      trackHeight,\n      width,\n      height,\n      x,\n      y,\n      rowTrackdp = [paddingStart],\n      colTrackdp = [paddingTop];\n\n    for (i = 1, len = rowTracks.length; i < len; i++) {\n      rowTrackdp[i] = rowTrackdp[i - 1] + rowTracks[i].calculatedStyle.baseSize;\n    }\n\n    for (i = 1, len = colTracks.length; i < len; i++) {\n      colTrackdp[i] = colTrackdp[i - 1] + colTracks[i].calculatedStyle.baseSize;\n    }\n    domTree.layout = {\n      x: 0,\n      y: 0,\n      width: isNaN(domTree.style.width) ? colTrackdp[colTrackdp.length - 1] : domTree.style.width,\n      height: isNaN(domTree.style.height) ? rowTrackdp[rowTrackdp.length - 1] : domTree.style.height\n    };\n    (domTree.children || []).forEach((child, index) => {\n      item = sanitizedItems[index];\n      trackWidth = colTrackdp[item.colEnd - 1] - colTrackdp[item.colStart - 1];\n      trackHeight = rowTrackdp[item.rowEnd - 1] - rowTrackdp[item.rowStart - 1];\n\n      width = isNaN(+child.style.width) ? trackWidth : +child.style.width;\n      height = isNaN(+child.style.height) ? trackHeight : +child.style.height;\n\n      switch (justifyItems || child.style.justifySelf) {\n      case CENTER:\n        x = colTrackdp[item.colStart - 1] + (trackWidth / 2) - (width / 2); break;\n      case END:\n        x = colTrackdp[item.colEnd - 1] - width; break;\n      case STRETCH:\n        width = trackWidth;\n        x = colTrackdp[item.colStart - 1]; break;\n      default:\n        x = colTrackdp[item.colStart - 1];\n      }\n\n      switch (alignItems || child.style.alignSelf) {\n      case CENTER:\n        y = rowTrackdp[item.rowStart - 1] + (trackHeight / 2) - (height / 2); break;\n      case END:\n        y = rowTrackdp[item.rowEnd - 1] - height; break;\n      case STRETCH:\n        height = trackHeight;\n        y = rowTrackdp[item.rowStart - 1]; break;\n      default:\n        y = rowTrackdp[item.rowStart - 1];\n      }\n\n      x += pluckNumber(item.style.paddingStart, item.style.padding, 0);\n      y += pluckNumber(item.style.paddingTop, item.style.padding, 0);\n\n      child.layout = {\n        x,\n        y,\n        x2: x + width,\n        y2: y + height,\n        width,\n        height\n      };\n    });\n\n    return this;\n  }\n}\n\nconst replaceWithAbsValue = (styleTrack = '', calculatedTrack) => {\n    let trackSplitAr = styleTrack.split(templateSplitRegex).filter(track => track && !!track.trim()),\n      trackWithAbsValue = '',\n      counter = 1;\n\n    if (trackSplitAr.length && !(/repeat\\(/.test(styleTrack))) {\n      trackSplitAr.forEach(track => {\n        if (validSizes.indexOf(track) > -1 || /[0-9]fr/.test(track) || minmaxRegex.test(track) || !isNaN(track)) {\n          trackWithAbsValue += calculatedTrack[counter].calculatedStyle.baseSize + ' ';\n          counter++;\n        } else {\n          trackWithAbsValue += track + ' ';\n        }\n      });\n    } else {\n      calculatedTrack.forEach(track => {\n        if (isNaN(track.calculatedStyle.baseSize)) return;\n\n        trackWithAbsValue += (track.calculatedStyle.baseSize + ' ');\n      });\n    }\n\n    return trackWithAbsValue.trim();\n  },\n  updateDomTreeWithResolvedValues = (domTree, grid) => {\n    let containerStyle = domTree.style,\n      rowTracks = grid.getConfig('rowTracks'),\n      colTracks = grid.getConfig('colTracks'),\n      mapping = grid.getConfig('mapping'),\n      { gridTemplateRows, gridTemplateColumns } = containerStyle,\n      child,\n      i,\n      j,\n      len,\n      rowTrackSum,\n      colTrackSum,\n      rowStart,\n      rowEnd,\n      colStart,\n      colEnd;\n\n    domTree.style.gridTemplateRows = replaceWithAbsValue(gridTemplateRows, rowTracks);\n    domTree.style.gridTemplateColumns = replaceWithAbsValue(gridTemplateColumns, colTracks);\n\n    for (i = 0, len = (domTree.children || []).length; i < len; i++) {\n      child = domTree.children[i];\n      if (getDisplayProperty(child)) {\n        child.style.gridTemplateColumns = child.userGivenStyles.gridTemplateColumns;\n        child.style.gridTemplateRows = child.userGivenStyles.gridTemplateRows;\n        if (isNaN(child.userGivenStyles.width)) {\n          colStart = child.style.gridColumnStart;\n          colEnd = child.style.gridColumnEnd;\n\n          colStart = mapping.col.nameToLineMap[colStart];\n          colEnd = mapping.col.nameToLineMap[colEnd];\n\n          for (j = colStart, colTrackSum = 0; j < colEnd; j++) {\n            colTrackSum += colTracks[j].calculatedStyle.baseSize;\n          }\n          child.style.width = colTrackSum;\n        }\n        if (isNaN(child.userGivenStyles.height)) {\n          rowStart = child.style.gridRowStart;\n          rowEnd = child.style.gridRowEnd;\n\n          rowStart = mapping.row.nameToLineMap[rowStart];\n          rowEnd = mapping.row.nameToLineMap[rowEnd];\n\n          for (j = rowStart, rowTrackSum = 0; j < rowEnd; j++) {\n            rowTrackSum += rowTracks[j].calculatedStyle.baseSize;\n          }\n          child.style.height = rowTrackSum;\n        }\n      }\n    }\n\n    return domTree;\n  };\n\nfunction computeGridLayout (domTree, count = 1) {\n  let i,\n    len,\n    style = domTree.style,\n    child,\n    grid;\n\n  if (!domTree || !domTree.style) {\n    return;\n  }\n\n  if (!domTree.userGivenStyles) {\n    domTree.style.width = isNaN(domTree.style.width) ? 'auto' : domTree.style.width;\n    domTree.style.height = isNaN(domTree.style.height) ? 'auto' : domTree.style.height;\n\n    style.paddingStart = pluckNumber(style.paddingStart, style.padding, 0);\n    style.paddingEnd = pluckNumber(style.paddingEnd, style.padding, 0);\n    style.paddingTop = pluckNumber(style.paddingTop, style.padding, 0);\n    style.paddingBottom = pluckNumber(style.paddingBottom, style.padding, 0);\n\n    domTree.userGivenStyles = {\n      gridTemplateColumns: domTree.style.gridTemplateColumns,\n      gridTemplateRows: domTree.style.gridTemplateRows,\n      width: domTree.style.width,\n      height: domTree.style.height\n    };\n  }\n\n  domTree.unResolvedChildren = [];\n  for (i = 0, len = (domTree.children && domTree.children.length); i < len; i++) {\n    child = domTree.children[i];\n    if (getDisplayProperty(child)) {\n      if (validNestedGrid(child)) {\n        this.compute(child);\n      } else {\n        domTree.unResolvedChildren.push(child);\n      }\n    }\n  }\n\n  grid = new Grid();\n  grid.set('domTree', domTree)\n    .set('parent', this)\n    .compute();\n\n  if (count < 2) {\n    this.gridLayoutEngine(updateDomTreeWithResolvedValues(domTree, grid), 2);\n  }\n\n  return domTree;\n}\n\nexport {\n  computeGridLayout\n};\n","const getMultiplierOfFr = size => +size.replace(/fr/, ''),\n  /**\n   * Helper function to distribute extra space among all the flexible tracks.\n   */\n  _frSpaceDistributorHelper = (tracks, totalSpaceUsed, containerSize) => {\n    let freeSpace,\n      spacePerFrTrack,\n      eligibleTracks,\n      totalFrTrackRatio = 0;\n\n    if (!tracks.length) {\n      return;\n    }\n\n    tracks.forEach(track => (totalFrTrackRatio += track.multiplier));\n\n    freeSpace = containerSize - totalSpaceUsed;\n    spacePerFrTrack = freeSpace / totalFrTrackRatio;\n\n    eligibleTracks = tracks.filter(track => track.baseSize <= track.multiplier * spacePerFrTrack);\n\n    if (eligibleTracks.length < tracks.length) {\n      tracks.filter(track => track.baseSize > track.multiplier * spacePerFrTrack).forEach(track => (totalSpaceUsed += track.baseSize));\n      return _frSpaceDistributorHelper(eligibleTracks, totalSpaceUsed, containerSize);\n    } else {\n      eligibleTracks.forEach(track => (track.baseSize = track.multiplier * spacePerFrTrack));\n    }\n  },\n  /**\n   * Helper function to distribute extra space among all the intrinsic tracks.\n   */\n  _intrinsicSpaceDistributorHelper = (tracks, totalSpaceUsed, containerSize) => {\n    let freeSpace,\n      spacePerIntrinsicTrack,\n      i,\n      len,\n      frozenTrack = 0,\n      minMaxTracks,\n      growthLimit,\n      baseSize;\n\n    if (!tracks.length) {\n      return;\n    }\n    minMaxTracks = tracks.filter(track => track.type === 'minmax' && track.growthLimit !== Infinity);\n    freeSpace = containerSize - totalSpaceUsed;\n\n    minMaxTracks.sort(function (a, b) {\n      let gap1 = a.growthLimit - a.baseSize,\n        gap2 = b.growthLimit - b.baseSize;\n\n      return gap1 - gap2;\n    });\n\n    len = minMaxTracks.length;\n    while (frozenTrack < len && freeSpace) {\n      spacePerIntrinsicTrack = freeSpace / ((minMaxTracks.length - frozenTrack) || 1);\n      /**\n       * @todo: remove the frozen tracks.\n       */\n      for (i = 0, len = minMaxTracks.length; i < len; i++) {\n        growthLimit = minMaxTracks[i].growthLimit;\n\n        baseSize = Math.min(spacePerIntrinsicTrack + minMaxTracks[i].baseSize, growthLimit);\n        freeSpace -= (baseSize - minMaxTracks[i].baseSize);\n        minMaxTracks[i].baseSize = baseSize;\n\n        if (growthLimit === baseSize && !minMaxTracks[i].frozen) {\n          minMaxTracks[i].frozen = true;\n          frozenTrack++;\n        }\n      }\n    }\n\n    tracks = tracks.filter(track => (track.type === 'minmax' && track.growthLimit === Infinity) || track.type !== 'minmax');\n    spacePerIntrinsicTrack = freeSpace / tracks.length;\n\n    tracks.forEach(track => (track.baseSize += spacePerIntrinsicTrack));\n  };\n\n/**\n * TrackResolver implements the standard track solving algorithm of CSS grid.\n * Refer https://www.w3.org/TR/css-grid-1/#algo-track-sizing\n *\n * @class TrackResolver\n */\nclass TrackResolver {\n  constructor (tracks = [], items = [], containerSize = 600) {\n    this.clear();\n\n    this.set('tracks', tracks);\n    this.set('items', items);\n    this.set('containerSize', containerSize);\n    return this;\n  }\n\n  /**\n   * setter method to set props\n   *\n   * @param   {string} key\n   *          key represents the name by which the value is to be stored in props object.\n   * @param   {any} info\n   *          info is the information(can be anything) that has to be stored against the key.\n   * @returns {TrackResolver}\n   *          Reference of the class instance.\n   * @memberof TrackResolver\n   */\n  set (key, info) {\n    this.props[key] = info;\n\n    switch (key) {\n    case 'tracks':\n      this._initTrackSize(); break;\n    case 'items':\n      this._initItems(); break;\n    case 'containerSize': \n      this.props[key] = isNaN(+info) ? 0 : +info;\n    }\n    return this;\n  }\n\n  /**\n   * Getter method to fetch the props\n   *\n   * @param   {string} key\n   *          key of the value which has to be fetched.\n   * @returns {any}\n   *          alue corresponding to the key in props object\n   * @memberof TrackResolver\n   */\n  get (key) {\n    return this.props[key];\n  }\n\n  /**\n   * Initializes the tracks. Both rows and columns in grid are tracks in TrackResolver.\n   * Each track is assigned a baseSize and growthLimit. BaseSize is the minimum size that a track can take,\n   * while growthLimit is the max size.\n   *\n   * Terminology:\n   * FrTracks: Tracks which have a size definition in terms of fr(free space)\n   * Intrinsic Tracks: Tracks which have a size definition of auto.\n   *\n   * @param   {Array} _tracks\n   *          Array containing information about the tracks.\n   * @returns {Array}\n   *          Array of sanitized tracks. A sanitized track consists of the following information\n   *          {\n   *              type: minmax | fixed | flex | intrinsic\n   *                    minmax: track has size definition in minmax format\n   *                    fixed: a fixed numeric value is provided as size definition\n   *                    flex: size definition is provided in terms of fr\n   *                    intrinsic: auto size definition\n   *              multiplier: Prefix of fr(2 in case of 2fr). default 1.\n   *              baseSize: lower size limit of track.\n   *              growthLimit: upper size limit of track.\n   *          }\n   * @memberof TrackResolver\n   */\n  _initTrackSize (_tracks) {\n    let tracks = _tracks || this.props.tracks || [],\n      config = this._config,\n      trackAr = [{}],\n      i,\n      len,\n      size,\n      type,\n      multiplier,\n      baseSize,\n      growthLimit;\n\n    config.frTracks = [];\n    config.intrinsicTracks = [];\n\n    for (i = 1, len = tracks.length; i < len; i++) {\n      size = tracks[i].size;\n\n      multiplier = 1;\n      if (Array.isArray(size)) {\n        baseSize = +size[0] || 0;\n\n        if (size[1].indexOf('fr') > 0 || size[0].indexOf('fr') > 0) {\n          growthLimit = Infinity;\n          config.frTracks.push(i);\n          type = 'minmax';\n        } else if (size[1] === 'auto' || size[0] === 'auto') {\n          growthLimit = Infinity;\n          config.intrinsicTracks.push(i);\n          type = 'minmax';\n        } else if (!isNaN(+size[0]) && !isNaN(+size[1])) {\n          growthLimit = Math.max(+size[0], +size[1]);\n          baseSize = Math.min(+size[0], +size[1]);\n          config.intrinsicTracks.push(i);\n          type = 'minmax';\n        }\n      } else if (!isNaN(+size)) {\n        baseSize = growthLimit = +size;\n        type = 'fixed';\n      } else if (size.indexOf('fr') > 0) {\n        baseSize = 0;\n        growthLimit = Infinity;\n        config.frTracks.push(i);\n        type = 'flex';\n        multiplier = getMultiplierOfFr(size);\n      } else {\n        baseSize = 0;\n        growthLimit = Infinity;\n        type = 'intrinsic';\n        config.intrinsicTracks.push(i);\n      }\n\n      trackAr.push({\n        ...tracks[i],\n        type,\n        multiplier,\n        baseSize,\n        growthLimit\n      });\n    }\n\n    return (config.sanitizedTracks = trackAr);\n  }\n\n  /**\n   * The size of grid items are sanitized in this method. In case the items do not have a valid size, they\n   * take up size of the tracks\n   *\n   * @param   {Array} _items\n   *          Array of grid items\n   * @returns {Array}\n   *          Array of items where each item has valid size\n   * @memberof TrackResolver\n   */\n  _initItems (_items) {\n    let items = _items || this.props.items || [],\n      config = this._config,\n      sanitizedItems = [],\n      nonSpanningItemStartIndex,\n      item,\n      validItems = 0,\n      i,\n      len;\n\n    for (i = 0, len = items.length; i < len; i++) {\n      if (isNaN(items[i].start) || isNaN(items[i].end)) {\n        config.autoFlow.push(items[i]);\n        continue;\n      }\n      sanitizedItems.push({...items[i]});\n\n      item = sanitizedItems[validItems];\n      validItems++;\n\n      item.size = isNaN(item.size) ? this._getParentSize(item) : +item.size;\n    }\n\n    sanitizedItems.sort(function (a, b) {\n      let gap1 = a.end - a.start,\n        gap2 = b.end - b.start;\n\n      if (gap1 === gap2) {\n        return a.start - b.start;\n      } else { return gap1 - gap2; }\n    });\n\n    for (i = 0, nonSpanningItemStartIndex = len = sanitizedItems.length; i < len; i++) {\n      if (sanitizedItems[i].end - sanitizedItems[i].start > 1) {\n        nonSpanningItemStartIndex = i;\n        break;\n      }\n    }\n\n    this._config.nonSpanningItemStartIndex = nonSpanningItemStartIndex;\n\n    return (this._config.sanitizedItems = sanitizedItems);\n  }\n\n  /**\n   * If any grid item do not have a valid size, then it takes up the size of the track.\n   *\n   * @param   {Object} item\n   *          The item which do not have a proper size and will take up the size of the track.\n   * @returns {number}\n   *          size of the track(s) which will be assigned to the grid item.\n   * @memberof TrackResolver\n   */\n  _getParentSize (item) {\n    let { sanitizedTracks } = this._config,\n      parentTracks,\n      widthOfParentTracks = 0;\n\n    parentTracks = sanitizedTracks.filter(track => (track.start >= item.start && track.end <= item.end));\n\n    parentTracks.forEach(track => (widthOfParentTracks += track.baseSize));\n\n    return (widthOfParentTracks || 0);\n  }\n\n  /**\n   * resolveTracks method is called to resolve the tracks.\n   *\n   * Terminology:\n   * Non-spanning items - items which is contained in a single track.\n   * Spanning items -  items which is spread across multiple tracks.\n   *\n   * 1. At first all the non-spanning items are placed. The tracks containing non-spanning gets a minimum size.\n   * 2. Then the spanning items are placed. If total size of all the tracks over which the spanning items are spread is less than\n   *  the size of the spanning items, then the extra space required by the item is accomodated equally by the non-fixed tracks.\n   * 3. Afer all the items are placed, if any free space remains, they get distributed among the non-fixed tracks.\n   *\n   * @returns {Array}\n   *          Array of objects where each object is a track with resolved size.\n   * @memberof TrackResolver\n   */\n  resolveTracks () {\n    this._placeNonSpanningItems()\n      ._placeSpanningItems()\n      ._distributeFreeSpace();\n\n    return this._config.sanitizedTracks;\n  }\n\n  /**\n   * Placing a non-spanning item. After placing the item if the containing track has a non-fixed size, it is increased to\n   * accomodate the item.\n   *\n   * @returns {TrackResolver}\n   *          Reference of the class instance.\n   * @memberof TrackResolver\n   */\n  _placeNonSpanningItems () {\n    let { sanitizedItems, sanitizedTracks, nonSpanningItemStartIndex } = this._config,\n      nonSpanningItems = sanitizedItems.slice(0, nonSpanningItemStartIndex),\n      track,\n      trackIndex;\n\n    nonSpanningItems.forEach(item => {\n      trackIndex = item.start;\n      track = sanitizedTracks[trackIndex];\n\n      if (track.type !== 'fixed') {\n        track.baseSize = Math.max(track.baseSize, item.size);\n        track.growthLimit = Math.max(track.growthLimit, track.baseSize);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Place the non-spanning items. If the total size of all tracks on which the item is spread is less than\n   * the size of the item, then the extra size required is accomodated by equally increasing the size of\n   * all the non-fixed containing tracks.\n   *\n   * @returns {TrackResolver}\n   *          Reference of the class instance.\n   * @memberof TrackResolver\n   */\n  _placeSpanningItems () {\n    let { sanitizedItems, sanitizedTracks, nonSpanningItemStartIndex, frTracks } = this._config,\n      spanningItems = sanitizedItems.slice(nonSpanningItemStartIndex),\n      trackSizedp = [0],\n      sizeConsumed,\n      sizeLeft,\n      sizePerTrack,\n      availableTracks,\n      hasFrTrack,\n      i,\n      len;\n\n    if (!spanningItems.length) return this;\n\n    for (i = 1, len = sanitizedTracks.length; i < len; i++) {\n      trackSizedp[i] = trackSizedp[i - 1] + (sanitizedTracks[i].baseSize || 0);\n    }\n\n    spanningItems.forEach(item => {\n      sizeConsumed = trackSizedp[item.end - 1] - trackSizedp[item.start - 1];\n      sizeLeft = Math.max(0, item.size - sizeConsumed);\n\n      if (!sizeLeft) return;\n\n      for (i = item.start, hasFrTrack = false, availableTracks = 0; i < item.end; i++) {\n        if (frTracks.indexOf(i) >= 0) {\n          hasFrTrack = true;\n        }\n        if (sanitizedTracks[i].type !== 'fixed') {\n          availableTracks++;\n        }\n      }\n\n      if (!availableTracks || hasFrTrack) return;\n\n      sizePerTrack = sizeLeft / availableTracks;\n      for (i = item.start; i < item.end; i++) {\n        if (sanitizedTracks[i].type !== 'fixed') {\n          sanitizedTracks[i].baseSize += sizePerTrack;\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * After all the items are placed and if any free space remains, it is distributed among the tracks.\n   * Distribution strategy depends on the track configurations.\n   * If there are tracks with flexible size\n   * definition(fr), then all the free space is allocated to those tracks.\n   * If there are no tracks with flexible size definiton, then the free space is distributed\n   * evenly among the intrinsic tracks.\n   * If all the tracks are fixed(ie, have fixed size), then the free space is not distributed.\n   *\n   * @returns {TrackResolver}\n   *          Reference of the class instance.\n   * @memberof TrackResolver\n   */\n  _distributeFreeSpace () {\n    let { frTracks, intrinsicTracks, sanitizedTracks } = this._config,\n      { containerSize } = this.props,\n      totalSpaceUsed = 0;\n\n    sanitizedTracks.forEach(track => (totalSpaceUsed += (track.baseSize || 0)));\n\n    if (totalSpaceUsed < containerSize) {\n      if (frTracks.length) {\n        frTracks.forEach((trackId, index) => { frTracks[index] = sanitizedTracks[trackId]; });\n        frTracks.forEach(track => (totalSpaceUsed -= track.baseSize));\n        _frSpaceDistributorHelper(frTracks, totalSpaceUsed, containerSize);\n      } else if (intrinsicTracks.length) {\n        intrinsicTracks.forEach((trackId, index) => { intrinsicTracks[index] = sanitizedTracks[trackId]; });\n        _intrinsicSpaceDistributorHelper(intrinsicTracks, totalSpaceUsed, containerSize);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * clears the props and configuration of TrackResolver. This method is called before using\n   * TrackResolver with different set of input.\n   *\n   * @returns {TrackResolver}\n   *          Reference of the class instance.\n   * @memberof TrackResolver\n   */\n  clear () {\n    this.props = {};\n    this._config = {\n      frTracks: [],\n      intrinsicTracks: [],\n      autoFlow: []\n    };\n\n    return this;\n  }\n}\n\nexport default TrackResolver;\n","import { computeLayout } from './faber';\n\nexport {\n  computeLayout\n};\n","const DISPLAY_GRID = 'grid',\n  DISPLAY_FLEX = 'flex',\n  CENTER = 'center',\n  START = 'start',\n  END = 'end',\n  STRETCH = 'stretch',\n  ATOMIC_DATA_TYPE = ['string', 'number', 'function', 'boolean', 'undefined'];\n\nexport {\n  DISPLAY_GRID,\n  DISPLAY_FLEX,\n  CENTER,\n  START,\n  END,\n  STRETCH,\n  ATOMIC_DATA_TYPE\n};\n","import { ATOMIC_DATA_TYPE } from './constants';\n\nlet UNDEF;\n\nconst getDisplayProperty = (domTree) => {\n    return domTree.style && domTree.style.display;\n  },\n  cloneObject = (arg) => {\n    if ((ATOMIC_DATA_TYPE.indexOf(typeof arg) > -1) || arg === null) {\n      return arg;\n    }\n\n    if (Array.isArray(arg)) {\n      let i,\n        len,\n        arr = [];\n\n      for (i = 0, len = arg.length; i < len; i++) {\n        arr.push(cloneObject(arg[i]));\n      }\n\n      return arr;\n    } else if (typeof arg === 'object') {\n      let cloneObj = {},\n        key;\n\n      for (key in arg) {\n        cloneObj[key] = cloneObject(arg[key]);\n      }\n\n      return cloneObj;\n    }\n  },\n  attachLayoutInformation = (baseTree = {}, calculatedTree = {}) => {\n    let i,\n      len;\n\n    baseTree.layout = calculatedTree.layout;\n\n    for (i = 0, len = (baseTree.children || []).length; i < len; i++) {\n      attachLayoutInformation(baseTree.children[i], calculatedTree.children[i]);\n    }\n  },\n  pluckNumber = function () {\n    var arg,\n      i,\n      l;\n\n    for (i = 0, l = arguments.length; i < l; i += 1) {\n      arg = arguments[i];\n      if (!arg && arg !== false && arg !== 0) {\n        continue;\n      } else if (isNaN(arg = Number(arg))) {\n        continue;\n      }\n      return arg;\n    }\n    return UNDEF;\n  };\n\nexport {\n  cloneObject,\n  attachLayoutInformation,\n  getDisplayProperty,\n  pluckNumber\n};\n"],"sourceRoot":""}